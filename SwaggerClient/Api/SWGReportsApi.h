#import <Foundation/Foundation.h>
#import "SWGErrorResponse.h"
#import "SWGReportingKPIActiveSupportMinutesResponse.h"
#import "SWGReportingKPIAverageTimeToScheduledResponse.h"
#import "SWGReportingKPIIssuesByAgeResponse.h"
#import "SWGReportingKPIIssuesByCategoryResponse.h"
#import "SWGReportingKPIIssuesByGeographyResponse.h"
#import "SWGReportingKPIIssuesByLocationResponse.h"
#import "SWGReportingKPIIssuesOverTimeResponse.h"
#import "SWGReportingKPIIssuesRemoteVsOnsiteResponse.h"
#import "SWGReportingKPIIssuesTimeToCompletionResponse.h"
#import "SWGReportingKPIOpenIssuesResponse.h"
#import "SWGReportingKPIOrgOwnedIssuesResponse.h"
#import "SWGReportingKPITimeOnsiteByLocationResponse.h"
#import "SWGReportingOrgsResponse.h"
#import "SWGReportingTechniciansResponse.h"
#import "SWGApi.h"

/**
* Boomtown Cloud API
* The REST API for 3rd-party integrations with the Boomtown Cloud. Authentication is provided as HTTP headers using the credentials provided to you at sign-up time. To access the Cloud API, is recommended to use the open source [Boomtown Cloud SDK](https://github.com/goboomtown) as this handles authentication and data-handling for you, but plain REST can be used as well. If not using a provided SDK, provide authentication details via HTTP headers `X-Boomtown-Token` and `X-Boomtown-Signature` as described [in the SDK documentation](https://github.com/goboomtown/cloud-sdk-php#documentation-for-authorization) 
*
* OpenAPI spec version: 3.0.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface SWGReportsApi: NSObject <SWGApi>

extern NSString* kSWGReportsApiErrorDomain;
extern NSInteger kSWGReportsApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(SWGApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Key Performance Indicator Support Minutes By Category
/// App and phone support minutes by category
///
/// @param startDate The report start date (optional)
/// @param endDate The report end date (optional)
/// 
///  code:200 message:"Support minutes by category",
///  code:0 message:"Unexpected error"
///
/// @return SWGReportingKPIActiveSupportMinutesResponse*
-(NSURLSessionTask*) getReportActiveSupportMinutesWithStartDate: (NSString*) startDate
    endDate: (NSString*) endDate
    completionHandler: (void (^)(SWGReportingKPIActiveSupportMinutesResponse* output, NSError* error)) handler;


/// Key Performance Indicator Average Time To Scheduled
/// Returns the average of the difference (in days) of the onsite support scheduled date from the issue creation date
///
/// @param startDate The report start date (optional)
/// @param endDate The report end date (optional)
/// 
///  code:200 message:"Average number of days between issue creation and scheduled onsite by issue category",
///  code:0 message:"Unexpected error"
///
/// @return SWGReportingKPIAverageTimeToScheduledResponse*
-(NSURLSessionTask*) getReportAverageTimeToScheduledWithStartDate: (NSString*) startDate
    endDate: (NSString*) endDate
    completionHandler: (void (^)(SWGReportingKPIAverageTimeToScheduledResponse* output, NSError* error)) handler;


/// Key Performance Indicator Issues By Age
/// Count of issues by static date ranges
///
/// @param startDate The report start date (optional)
/// @param endDate The report end date (optional)
/// 
///  code:200 message:"Counts of issues for static date ranges/ages",
///  code:0 message:"Unexpected error"
///
/// @return SWGReportingKPIIssuesByAgeResponse*
-(NSURLSessionTask*) getReportIssuesByAgeWithStartDate: (NSString*) startDate
    endDate: (NSString*) endDate
    completionHandler: (void (^)(SWGReportingKPIIssuesByAgeResponse* output, NSError* error)) handler;


/// Key Performance Indicator Issues By Category
/// Count of issues by category
///
/// @param startDate The report start date (optional)
/// @param endDate The report end date (optional)
/// 
///  code:200 message:"Support minutes by category",
///  code:0 message:"Unexpected error"
///
/// @return SWGReportingKPIIssuesByCategoryResponse*
-(NSURLSessionTask*) getReportIssuesByCategoryWithStartDate: (NSString*) startDate
    endDate: (NSString*) endDate
    completionHandler: (void (^)(SWGReportingKPIIssuesByCategoryResponse* output, NSError* error)) handler;


/// Key Performance Indicator Issues By Geography
/// Returns a count of issues separated by geographic boundaries
///
/// @param startDate The report start date (optional)
/// @param endDate The report end date (optional)
/// @param division Geographic boundary type (null &#x3D; state|country|zipcode) (optional)
/// @param issueType Issue type (optional)
/// 
///  code:200 message:"Count of issues separated by a geographic boundary",
///  code:0 message:"Unexpected error"
///
/// @return SWGReportingKPIIssuesByGeographyResponse*
-(NSURLSessionTask*) getReportIssuesByGeographyWithStartDate: (NSString*) startDate
    endDate: (NSString*) endDate
    division: (NSString*) division
    issueType: (NSNumber*) issueType
    completionHandler: (void (^)(SWGReportingKPIIssuesByGeographyResponse* output, NSError* error)) handler;


/// Key Performance Indicator Issues By Location
/// Counts of issues by location
///
/// @param startDate The report start date (optional)
/// @param endDate The report end date (optional)
/// 
///  code:200 message:"Issues by location",
///  code:0 message:"Unexpected error"
///
/// @return SWGReportingKPIIssuesByLocationResponse*
-(NSURLSessionTask*) getReportIssuesByLocationWithStartDate: (NSString*) startDate
    endDate: (NSString*) endDate
    completionHandler: (void (^)(SWGReportingKPIIssuesByLocationResponse* output, NSError* error)) handler;


/// Key Performance Issues Over Time
/// Count of issues over an interval period
///
/// @param startDate The report start date (optional)
/// @param endDate The report end date (optional)
/// @param interval Interval for aggregate (null &#x3D; week|month|day) (optional)
/// 
///  code:200 message:"Issue count for interval",
///  code:0 message:"Unexpected error"
///
/// @return SWGReportingKPIIssuesOverTimeResponse*
-(NSURLSessionTask*) getReportIssuesOverTimeWithStartDate: (NSString*) startDate
    endDate: (NSString*) endDate
    interval: (NSString*) interval
    completionHandler: (void (^)(SWGReportingKPIIssuesOverTimeResponse* output, NSError* error)) handler;


/// Key Performance Indicator Issues Remote vs Onsite
/// Counts & Percentages of remote and onsite issues
///
/// @param startDate The report start date (optional)
/// @param endDate The report end date (optional)
/// 
///  code:200 message:"Support minutes by category",
///  code:0 message:"Unexpected error"
///
/// @return SWGReportingKPIIssuesRemoteVsOnsiteResponse*
-(NSURLSessionTask*) getReportIssuesRemoteVsOnsiteWithStartDate: (NSString*) startDate
    endDate: (NSString*) endDate
    completionHandler: (void (^)(SWGReportingKPIIssuesRemoteVsOnsiteResponse* output, NSError* error)) handler;


/// Key Performance Indicator Issue Time To Completion
/// Average time difference between issue resolution and creation
///
/// @param startDate The report start date (optional)
/// @param endDate The report end date (optional)
/// @param issueType Issue Type (optional)
/// 
///  code:200 message:"Average time difference in MIN when type = support, DAY when type = work order",
///  code:0 message:"Unexpected error"
///
/// @return SWGReportingKPIIssuesTimeToCompletionResponse*
-(NSURLSessionTask*) getReportIssuesTimeToCompletionWithStartDate: (NSString*) startDate
    endDate: (NSString*) endDate
    issueType: (NSString*) issueType
    completionHandler: (void (^)(SWGReportingKPIIssuesTimeToCompletionResponse* output, NSError* error)) handler;


/// Key Performance Indicator Open Issues
/// List of open issues
///
/// @param startDate The report start date (optional)
/// @param endDate The report end date (optional)
/// 
///  code:200 message:"Key data points of open issues",
///  code:0 message:"Unexpected error"
///
/// @return SWGReportingKPIOpenIssuesResponse*
-(NSURLSessionTask*) getReportOpenIssuesWithStartDate: (NSString*) startDate
    endDate: (NSString*) endDate
    completionHandler: (void (^)(SWGReportingKPIOpenIssuesResponse* output, NSError* error)) handler;


/// Key Performance Indicator Org Owned Issues
/// Counts of work order and support type issues
///
/// @param startDate The report start date (optional)
/// @param endDate The report end date (optional)
/// 
///  code:200 message:"Issue counts by work order and support issue types",
///  code:0 message:"Unexpected error"
///
/// @return SWGReportingKPIOrgOwnedIssuesResponse*
-(NSURLSessionTask*) getReportOrgOwnedIssuesWithStartDate: (NSString*) startDate
    endDate: (NSString*) endDate
    completionHandler: (void (^)(SWGReportingKPIOrgOwnedIssuesResponse* output, NSError* error)) handler;


/// Get an Org Report
/// Returns a collection of *OrgReportItem* reporting objects with header information.
///
/// @param startDate The report start date
/// @param endDate The report end date
/// 
///  code:200 message:"Collection of *OrgReportItem* objects",
///  code:0 message:"Unexpected error"
///
/// @return SWGReportingOrgsResponse*
-(NSURLSessionTask*) getReportOrgsWithStartDate: (NSString*) startDate
    endDate: (NSString*) endDate
    completionHandler: (void (^)(SWGReportingOrgsResponse* output, NSError* error)) handler;


/// Get a Technician Report
/// Returns a collection of *TechnicianReportItem* reporting objects with header information.
///
/// @param startDate The report start date (optional)
/// @param endDate The report end date (optional)
/// 
///  code:200 message:"Collection of *TechnicianReportItem* objects",
///  code:0 message:"Unexpected error"
///
/// @return SWGReportingTechniciansResponse*
-(NSURLSessionTask*) getReportTechniciansWithStartDate: (NSString*) startDate
    endDate: (NSString*) endDate
    completionHandler: (void (^)(SWGReportingTechniciansResponse* output, NSError* error)) handler;


/// Key Performance Indicator Time Onsite By Location
/// Counts of time onsite by location
///
/// @param startDate The report start date (optional)
/// @param endDate The report end date (optional)
/// @param interval null &#x3D; hour|minute|second (optional)
/// 
///  code:200 message:"Counts & averages of time onsite by loation",
///  code:0 message:"Unexpected error"
///
/// @return SWGReportingKPITimeOnsiteByLocationResponse*
-(NSURLSessionTask*) getReportTimeOnsiteByLocationWithStartDate: (NSString*) startDate
    endDate: (NSString*) endDate
    interval: (NSString*) interval
    completionHandler: (void (^)(SWGReportingKPITimeOnsiteByLocationResponse* output, NSError* error)) handler;



@end
