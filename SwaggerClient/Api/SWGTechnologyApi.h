#import <Foundation/Foundation.h>
#import "SWGCustomerTechnologyResponse.h"
#import "SWGErrorResponse.h"
#import "SWGTechnologyCreateRequest.h"
#import "SWGTechnologyCreateResponse.h"
#import "SWGTechnologyDictionaryResponse.h"
#import "SWGApi.h"

/**
* Boomtown Cloud API
* The REST API for 3rd-party integrations with the Boomtown Cloud. Authentication is provided as HTTP headers using the credentials provided to you at sign-up time. To access the Cloud API, is recommended to use the open source [Boomtown Cloud SDK](https://github.com/goboomtown) as this handles authentication and data-handling for you, but plain REST can be used as well. If not using a provided SDK, provide authentication details via HTTP headers `X-Boomtown-Token` and `X-Boomtown-Signature` as described [in the SDK documentation](https://github.com/goboomtown/cloud-sdk-php#documentation-for-authorization) 
*
* OpenAPI spec version: 3.0.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface SWGTechnologyApi: NSObject <SWGApi>

extern NSString* kSWGTechnologyApiErrorDomain;
extern NSInteger kSWGTechnologyApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(SWGApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Delete Technology
/// Deletes the `CustomerTechnology` object referenced by the object's Primary Key (id)
///
/// @param technologyId The primary key of the &#x60;CustomerTechnology&#x60; object
/// 
///  code:200 message:"Empty response on success",
///  code:400 message:"",
///  code:403 message:"",
///  code:404 message:"",
///  code:422 message:"",
///  code:500 message:""
///
/// @return void
-(NSURLSessionTask*) deleteTechnologyWithTechnologyId: (NSString*) technologyId
    completionHandler: (void (^)(NSError* error)) handler;


/// Get Technology by ID
/// Returns a `CustomerTechnology` object by the object's Primary Key (id)
///
/// @param technologyId The primary key of the &#x60;CustomerTechnology&#x60; object
/// 
///  code:200 message:"Array of technology types",
///  code:0 message:"Unexpected error"
///
/// @return SWGCustomerTechnologyResponse*
-(NSURLSessionTask*) getTechnologyWithTechnologyId: (NSString*) technologyId
    completionHandler: (void (^)(SWGCustomerTechnologyResponse* output, NSError* error)) handler;


/// List technology types
/// Returns a list of the available technology device types (used for the `type` field of Technology objects)
///
/// 
///  code:200 message:"Mapping of device types",
///  code:0 message:"Unexpected error"
///
/// @return SWGTechnologyDictionaryResponse*
-(NSURLSessionTask*) listTechnologyDictionaryWithCompletionHandler: 
    (void (^)(SWGTechnologyDictionaryResponse* output, NSError* error)) handler;


/// List technology templates
/// Returns a list of the available device / technology templates
///
/// 
///  code:200 message:"Array of technology templates",
///  code:0 message:"Unexpected error"
///
/// @return SWGCustomerTechnologyResponse*
-(NSURLSessionTask*) listTechnologyTemplatesWithCompletionHandler: 
    (void (^)(SWGCustomerTechnologyResponse* output, NSError* error)) handler;


/// Create/update a Technology object
/// Creates/updates a `CustomerTechnology` object. To create a new object, supply the data for the new object in the request body with the `id` property set to `NULL` or omitted. To **update** an existing entry, ensure the ID of the object to be updated is set in the `id` parameter of the request, and provide any other fields to update.
///
/// @param body The *Technology*  data to create/update
/// 
///  code:200 message:"The created `CustomerTechnology` object",
///  code:400 message:"",
///  code:403 message:"",
///  code:404 message:"",
///  code:422 message:"",
///  code:500 message:""
///
/// @return SWGTechnologyCreateResponse*
-(NSURLSessionTask*) putTechnologyWithBody: (SWGTechnologyCreateRequest*) body
    completionHandler: (void (^)(SWGTechnologyCreateResponse* output, NSError* error)) handler;



@end
