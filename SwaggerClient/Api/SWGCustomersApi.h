#import <Foundation/Foundation.h>
#import "SWGCommonResponse.h"
#import "SWGCustomFormsResponse.h"
#import "SWGCustomerCreateRequest.h"
#import "SWGCustomerCreateResponse.h"
#import "SWGCustomerLocationPutRequest.h"
#import "SWGCustomerLocationResponse.h"
#import "SWGCustomerResponse.h"
#import "SWGCustomerTechnologyResponse.h"
#import "SWGCustomerUserPutRequest.h"
#import "SWGCustomerUserResponse.h"
#import "SWGCustomerUsersResponse.h"
#import "SWGErrorResponse.h"
#import "SWGExistsResponse.h"
#import "SWGHashMapResponse.h"
#import "SWGSmsInviteResponse.h"
#import "SWGApi.h"

/**
* Boomtown Cloud API
* The REST API for 3rd-party integrations with the Boomtown Cloud. Authentication is provided as HTTP headers using the credentials provided to you at sign-up time. To access the Cloud API, is recommended to use the open source [Boomtown Cloud SDK](https://github.com/goboomtown) as this handles authentication and data-handling for you, but plain REST can be used as well. If not using a provided SDK, provide authentication details via HTTP headers `X-Boomtown-Token` and `X-Boomtown-Signature` as described [in the SDK documentation](https://github.com/goboomtown/cloud-sdk-php#documentation-for-authorization) 
*
* OpenAPI spec version: 3.0.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface SWGCustomersApi: NSObject <SWGApi>

extern NSString* kSWGCustomersApiErrorDomain;
extern NSInteger kSWGCustomersApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(SWGApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Check if an email address is in use by a Customer User
/// Returns whether a Customer User with the email address exists or not
///
/// @param email Email Address to check
/// 
///  code:200 message:"An object with an *exists* property",
///  code:0 message:"Unexpected error"
///
/// @return SWGExistsResponse*
-(NSURLSessionTask*) checkCustomerUserEmailWithEmail: (NSString*) email
    completionHandler: (void (^)(SWGExistsResponse* output, NSError* error)) handler;


/// Get a Customer Location by Issue Id
/// Lookup a Customer Location by an Issue Id
///
/// @param issueId An Issue Id
/// 
///  code:200 message:"Collection of *Customer Location* objects",
///  code:0 message:"Unexpected error"
///
/// @return SWGCustomerLocationResponse*
-(NSURLSessionTask*) customerLocationLookupByIssueIdWithIssueId: (NSString*) issueId
    completionHandler: (void (^)(SWGCustomerLocationResponse* output, NSError* error)) handler;


/// Get a Customer Location byemail address
/// Lookup a Location by the value of the email field
///
/// @param email The Customer Location&#39;s email address
/// 
///  code:200 message:"Collection of *Customer Location* objects",
///  code:0 message:"Unexpected error"
///
/// @return SWGCustomerLocationResponse*
-(NSURLSessionTask*) customerLocationLookupByUserEmailWithEmail: (NSString*) email
    completionHandler: (void (^)(SWGCustomerLocationResponse* output, NSError* error)) handler;


/// Get a Customer Location by external_id
/// Lookup a Customer Location by the external_id field, corrolating to the ID in the callee's system
///
/// @param externalId The Customer&#39;s external ID
/// 
///  code:200 message:"Collection of *Customer Location* objects",
///  code:0 message:"Unexpected error"
///
/// @return SWGCustomerLocationResponse*
-(NSURLSessionTask*) customerLocationsLookupByExternalIdWithExternalId: (NSString*) externalId
    completionHandler: (void (^)(SWGCustomerLocationResponse* output, NSError* error)) handler;


/// Get a Customer by their login info
/// Lookup a Customer by their username and password
///
/// @param login The Customer&#39;s login name
/// @param password The Customer&#39;s login password
/// 
///  code:200 message:"The Customer object",
///  code:0 message:"Unexpected error"
///
/// @return SWGCustomerResponse*
-(NSURLSessionTask*) customerLookupWithLogin: (NSString*) login
    password: (NSString*) password
    completionHandler: (void (^)(SWGCustomerResponse* output, NSError* error)) handler;


/// Get a Customer by external_id
/// Lookup a Customer by the external_id field, corrolating to the ID in the callee's system
///
/// @param externalId The Customer&#39;s external ID
/// 
///  code:200 message:"The Customer object",
///  code:0 message:"Unexpected error"
///
/// @return SWGCustomerResponse*
-(NSURLSessionTask*) customerLookupByExternalIdWithExternalId: (NSString*) externalId
    completionHandler: (void (^)(SWGCustomerResponse* output, NSError* error)) handler;


/// Get a Customer by Issue Id
/// Lookup a Customer by an Issue Id
///
/// @param issueId An Issue Id
/// 
///  code:200 message:"The Customer object",
///  code:0 message:"Unexpected error"
///
/// @return SWGCustomerResponse*
-(NSURLSessionTask*) customerLookupByIssueIdWithIssueId: (NSString*) issueId
    completionHandler: (void (^)(SWGCustomerResponse* output, NSError* error)) handler;


/// Get a Customer by a User's Email
/// Lookup a Customer by a User Email
///
/// @param customerUserEmail The Customer User&#39;s email address
/// 
///  code:200 message:"The Customer object",
///  code:0 message:"Unexpected error"
///
/// @return SWGCustomerResponse*
-(NSURLSessionTask*) customerLookupByUserEmailWithCustomerUserEmail: (NSString*) customerUserEmail
    completionHandler: (void (^)(SWGCustomerResponse* output, NSError* error)) handler;


/// Get a Customer by a User Id
/// Lookup a Customer by a User Id
///
/// @param customerUserId The Customer User&#39;s Id
/// 
///  code:200 message:"The Customer object",
///  code:0 message:"Unexpected error"
///
/// @return SWGCustomerResponse*
-(NSURLSessionTask*) customerLookupByUserIdWithCustomerUserId: (NSString*) customerUserId
    completionHandler: (void (^)(SWGCustomerResponse* output, NSError* error)) handler;


/// Get a Customer User by Issue Id
/// Lookup a `CustomersUsers` by an Issue Id
///
/// @param issueId An Issue Id
/// 
///  code:200 message:"The `CustomerUser` object",
///  code:0 message:"Unexpected error"
///
/// @return SWGCustomerUserResponse*
-(NSURLSessionTask*) customerUserLookupByIssueIdWithIssueId: (NSString*) issueId
    completionHandler: (void (^)(SWGCustomerUserResponse* output, NSError* error)) handler;


/// Get a Customer User by external_id
/// Lookup a Customer User by the external_id field, corrolating to the ID in the callee's system
///
/// @param externalId The Customer User&#39;s external ID
/// 
///  code:200 message:"The Customer User object",
///  code:0 message:"Unexpected error"
///
/// @return SWGCustomerUserResponse*
-(NSURLSessionTask*) customerUsersLookupByExternalIdWithExternalId: (NSString*) externalId
    completionHandler: (void (^)(SWGCustomerUserResponse* output, NSError* error)) handler;


/// Get a Customer User by a User's Email
/// Lookup a Customer User by a User Email
///
/// @param customerUserEmail The Customer User&#39;s email address
/// 
///  code:200 message:"The Customer Users object",
///  code:0 message:"Unexpected error"
///
/// @return SWGCustomerUsersResponse*
-(NSURLSessionTask*) customerUsersLookupByUserEmailWithCustomerUserEmail: (NSString*) customerUserEmail
    completionHandler: (void (^)(SWGCustomerUsersResponse* output, NSError* error)) handler;


/// Get a Customer
/// Returns a `Customer` object.
///
/// @param customerId The primary key of the &#x60;Customer&#x60;
/// 
///  code:200 message:"The `Customer` object",
///  code:0 message:"Unexpected error"
///
/// @return SWGCustomerResponse*
-(NSURLSessionTask*) getCustomerWithCustomerId: (NSString*) customerId
    completionHandler: (void (^)(SWGCustomerResponse* output, NSError* error)) handler;


/// Get a collection of Users for a Customer Location
/// Returns a paginated collection of *Customer User* objects related to a *Customer Location* object.
///
/// @param customerId The primary key of the *Customer*
/// @param customerLocationId The primary key of the *Customer Location*
/// 
///  code:200 message:"Collection of *Customer User* objects",
///  code:0 message:"Unexpected error"
///
/// @return SWGCustomerUserResponse*
-(NSURLSessionTask*) getCustomerLocationUsersWithCustomerId: (NSString*) customerId
    customerLocationId: (NSString*) customerLocationId
    completionHandler: (void (^)(SWGCustomerUserResponse* output, NSError* error)) handler;


/// Get a collection of Locations for a Customer
/// Returns a paginated collection of *Customer Location* objects related to a *Customer* object.
///
/// @param customerId The primary key of the *Customer*
/// @param customerLocationId An optional customer_location_id to filter the results with (optional)
/// 
///  code:200 message:"Collection of *Customer Location* objects",
///  code:0 message:"Unexpected error"
///
/// @return SWGCustomerLocationResponse*
-(NSURLSessionTask*) getCustomerLocationsWithCustomerId: (NSString*) customerId
    customerLocationId: (NSString*) customerLocationId
    completionHandler: (void (^)(SWGCustomerLocationResponse* output, NSError* error)) handler;


/// List available custom forms for locations
/// Returns a paginated collection of `CustomForm` objects that are associated with `CustomerLocation` objects. A Custom Form is a list of additional custom fields which can apply to all Customer Location objects. Custom Forms are created and managed using Relay and may be associated with a specific Org Team
///
/// @param orgTeamId An optional org_team_id to filter the results with (optional)
/// 
///  code:200 message:"Collection of *CusomForm* objects",
///  code:0 message:"Unexpected error"
///
/// @return SWGCustomFormsResponse*
-(NSURLSessionTask*) getCustomerMetaCustomFormsWithOrgTeamId: (NSString*) orgTeamId
    completionHandler: (void (^)(SWGCustomFormsResponse* output, NSError* error)) handler;


/// Get 'Industry' dictionary for mapping keys to labels
/// Returns a dictionary for mapping 'Industry' keys to labels on `Customer` objects. Note that the actual return value might be an array, but it should be treated as a dictionary. (Provide array indexes as keys to API methods which require an Industry) 
///
/// 
///  code:200 message:"Array of key/label 'Industry' pairs",
///  code:0 message:"Unexpected error"
///
/// @return SWGHashMapResponse*
-(NSURLSessionTask*) getCustomerMetaIndustriesWithCompletionHandler: 
    (void (^)(SWGHashMapResponse* output, NSError* error)) handler;


/// Get 'Status' dictionary for mapping keys to labels
/// Returns a dictionary for mapping 'Status' keys to labels on `Customer` / `CustomerUser` objects. Note that the actual return value might be an array, but it should be treated as a dictionary. (Provide array indexes as keys to API methods which require a Status)
///
/// 
///  code:200 message:"Dictionary mapping `Status` keys to their labels",
///  code:0 message:"Unexpected error"
///
/// @return SWGHashMapResponse*
-(NSURLSessionTask*) getCustomerMetaStatusesWithCompletionHandler: 
    (void (^)(SWGHashMapResponse* output, NSError* error)) handler;


/// Get a collection of technology for a Customer
/// Returns a paginated collection of *CustomerTechnology* objects related to a *Customer Location* object.
///
/// @param customerId The primary key of the *Customer*
/// @param customerLocationId The primaru key of the *Customer Location*
/// @param customersTechnologyId An optional customers_technology_id to filter the results with (optional)
/// 
///  code:200 message:"Collection of *CustomerTechnology* objects",
///  code:0 message:"Unexpected error"
///
/// @return SWGCustomerTechnologyResponse*
-(NSURLSessionTask*) getCustomerTechnologyWithCustomerId: (NSString*) customerId
    customerLocationId: (NSString*) customerLocationId
    customersTechnologyId: (NSString*) customersTechnologyId
    completionHandler: (void (^)(SWGCustomerTechnologyResponse* output, NSError* error)) handler;


/// Get a collection of Users for a Customer
/// Returns a paginated collection of *Customer User* objects related to a *Customer* object.
///
/// @param customerId The primary key of the *Customer*
/// @param userId Optional user_id to filter the results with (optional)
/// 
///  code:200 message:"Collection of *Customer User* objects",
///  code:0 message:"Unexpected error"
///
/// @return SWGCustomerUserResponse*
-(NSURLSessionTask*) getCustomerUsersWithCustomerId: (NSString*) customerId
    userId: (NSString*) userId
    completionHandler: (void (^)(SWGCustomerUserResponse* output, NSError* error)) handler;


/// Create/update a Customer, Location, and User
/// Creates/updates a `Customer` object, `CustomerLocation` object, and `CustomerUser` object in a single atomic transaction.
///
/// @param body The *Customer*, *Customer Location* and *Customer User* data to create/update
/// 
///  code:200 message:"The created *Customer*, *Customer Location*, and *Customer User* objects",
///  code:400 message:"",
///  code:403 message:"",
///  code:404 message:"",
///  code:422 message:"",
///  code:500 message:""
///
/// @return SWGCustomerCreateResponse*
-(NSURLSessionTask*) putCustomerWithBody: (SWGCustomerCreateRequest*) body
    completionHandler: (void (^)(SWGCustomerCreateResponse* output, NSError* error)) handler;


/// Create/update a Customer Location
/// Creates/updates a `CustomerLocation` object
///
/// @param body The *Customer Location* data to create/update
/// 
///  code:200 message:"The created *Customer*, *Customer Location*, and *Customer User* objects",
///  code:400 message:"",
///  code:403 message:"",
///  code:404 message:"",
///  code:422 message:"",
///  code:500 message:""
///
/// @return SWGCustomerCreateResponse*
-(NSURLSessionTask*) putCustomerLocationWithBody: (SWGCustomerLocationPutRequest*) body
    completionHandler: (void (^)(SWGCustomerCreateResponse* output, NSError* error)) handler;


/// Create/update a Customer User
/// Creates/updates a `CustomerUser` object
///
/// @param body The *Customer User* data to create/update
/// 
///  code:200 message:"The created or modified *Customer User* objects",
///  code:400 message:"",
///  code:403 message:"",
///  code:404 message:"",
///  code:422 message:"",
///  code:500 message:""
///
/// @return SWGCustomerCreateResponse*
-(NSURLSessionTask*) putCustomerUsersWithBody: (SWGCustomerUserPutRequest*) body
    completionHandler: (void (^)(SWGCustomerCreateResponse* output, NSError* error)) handler;


/// Reset a Customer User's password
/// Reset a Customer User's password, a password reset email will be sent.
///
/// @param login E-mail address of the Customer User&#39;s account
/// 
///  code:200 message:"Empty response",
///  code:400 message:"",
///  code:403 message:"",
///  code:404 message:"",
///  code:422 message:"",
///  code:500 message:""
///
/// @return SWGCommonResponse*
-(NSURLSessionTask*) resetCustomerUserPasswordWithLogin: (NSString*) login
    completionHandler: (void (^)(SWGCommonResponse* output, NSError* error)) handler;


/// Invite an individual (via SMS) to download the App
/// Sends an SMS to an individual (creating a new *Customer User* for that user, if none exists) with instructions for downloading the Connect app. Creates an *Issue* for this user. Returns *Invitation*, *Customer User* and *Issue* IDs. 
///
/// @param smsNumber The SMS number to send the Invitation to.
/// @param orgTeamId Optional Org Team ID to use (Default team is used if no team ID is provided) (optional)
/// 
///  code:200 message:"Invite ID, Customer User ID, Issue ID",
///  code:400 message:"",
///  code:403 message:"",
///  code:404 message:"",
///  code:422 message:"",
///  code:500 message:""
///
/// @return SWGSmsInviteResponse*
-(NSURLSessionTask*) smsInviteWithSmsNumber: (NSString*) smsNumber
    orgTeamId: (NSString*) orgTeamId
    completionHandler: (void (^)(SWGSmsInviteResponse* output, NSError* error)) handler;



@end
